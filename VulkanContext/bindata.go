// Code generated by go-bindata.
// sources:
// Resources/Shaders/.DS_Store
// shaders/tri-frag.spv
// shaders/tri-vert.spv
// shaders/tri.frag
// shaders/tri.vert
// DO NOT EDIT!

package VulkanContext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shadersDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\xcd\x4a\xc3\x40\x14\x85\xcf\x8d\x59\x04\x74\x31\x4b\x97\xb3\x74\x63\xc1\x37\x18\x4a\x15\xdc\xea\x0b\x68\xfd\x43\x28\x54\xb4\x76\x9d\x07\xf4\x01\x7c\x1b\x9d\xc9\x9c\x58\x9b\x34\x82\xab\x16\x3d\x1f\x84\x6f\x20\xf7\x64\x26\x9b\xcc\xdc\x00\xb0\xf1\xeb\xed\x09\xe0\xe2\xb0\x42\xb6\xa5\xc1\x06\x2a\x5e\x3d\x0a\xba\x4c\xe1\xe6\x19\xf7\x78\xc6\x35\x1e\x30\xc2\xcb\xe6\x67\xed\x1c\x69\xed\x07\x58\xc4\x75\x3f\xe2\x78\x6d\xfd\x4f\x58\x9e\xcf\xe6\x37\xd3\xd9\x7c\x8a\xe6\xe5\xec\x3d\xfa\xe8\xa3\xa1\xc9\xae\x72\x4b\xdc\xc5\xd1\x62\x20\x77\xd1\xc9\x55\xcc\x8d\xda\xf9\xd6\xeb\x71\x36\x58\xcf\x79\x3a\xf5\x6f\x9d\x7a\x21\x84\x10\xe2\x27\x2c\xab\xda\xdf\xee\x32\x84\x10\x3b\x48\xfa\x3e\x78\x3a\xd0\x75\xb6\xf1\x7e\x41\x97\xdf\x32\x8e\xf6\x74\xa0\xeb\x6c\x63\x5d\x41\x97\x74\x45\x3b\xda\xd3\x81\xae\xb3\xf9\xd1\x32\x36\x1f\xc6\x99\xdb\xe6\xc5\x1c\xed\xe9\xf0\xcb\x97\x16\xe2\x9f\xb0\x97\xe5\xd2\xfe\x7f\x3a\xdc\xff\x0b\x21\xfe\x30\x56\x4e\x2e\x27\x63\x7c\x35\x04\x3d\xd2\x5e\xeb\xe3\x75\xd5\x06\xc0\xdd\x1c\xfd\x43\x40\x91\x7f\x16\x1e\x62\x75\xdf\xd3\x81\xae\xb3\x75\x10\x10\x62\x5b\x7c\x06\x00\x00\xff\xff\xd9\x1b\x2a\x0a\x04\x18\x00\x00")

func shadersDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_shadersDs_store,
		"Resources/Shaders/.DS_Store",
	)
}

func shadersDs_store() (*asset, error) {
	bytes, err := shadersDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/Shaders/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1471188258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriFragSpv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\x5b\x4a\xc3\x50\x10\x9d\x26\x26\x6d\x8c\x5a\x45\xd0\x3f\xa9\xf8\xa9\x94\x22\x55\x04\xd1\xa2\x82\xfe\x14\x04\x5d\xc0\xe5\xda\x5e\x62\xb5\x26\x35\x8f\x7f\x97\xe0\x36\x5c\x95\xdb\xf0\x43\xc1\x33\x93\x09\x68\x2f\xd3\xb9\x67\xe6\xe4\xcc\x99\xc4\xf7\xf6\xda\x44\x2d\x9c\x0e\x75\xa9\xfe\x6d\x90\x07\x4c\x14\x53\x28\xf9\x66\x7c\x3f\xee\x17\xe5\xb4\x3f\x3c\x1a\x70\x7f\x8d\x7c\xe1\x71\xaf\x0b\xce\x12\x32\xc7\x8b\x9d\xa5\x5c\x8f\x10\xeb\xe0\x70\x0d\xe2\xb8\xf9\x50\x24\x7a\x6f\x31\x2f\x82\x9e\xb9\xb8\xbb\x34\x85\x5b\xd8\xdc\x96\xce\x14\x8f\x76\xea\x72\x93\x3d\x3c\xb9\x49\x59\xfc\xe7\xa0\x35\x4b\x13\x33\xb7\x69\x52\xd9\xc4\x99\xe1\xe1\x60\x61\x27\xcf\x14\x80\xf5\x77\x66\x80\xc3\x73\xab\xeb\xdc\x26\x57\xd9\x3c\xcb\xe1\x5b\x94\x88\x76\x74\xaf\x4d\xb8\x60\x1f\xbb\xe2\x88\xe4\xbe\x85\x5b\x88\xdc\x43\x6c\x83\xcf\x7e\x43\xdd\xa7\x87\xff\x8e\xf8\xaf\xf7\x38\x55\x1c\x69\x6d\x1f\x98\xb9\xcb\xdc\xfb\xbc\x1d\x35\x38\xd6\x79\x0d\x5e\x41\x7c\x7f\xbc\x9e\x35\x78\x55\xba\x6f\xa3\x03\xa8\xb6\xe5\x7d\xd6\x1a\xb1\x72\xb9\x7f\x8c\x7d\x3c\xf5\x41\x3a\xef\x0b\x95\x00\xf9\x1c\x28\xd2\xe7\x7e\xf0\x15\x4e\x10\xbf\x01\x00\x00\xff\xff\xbb\x64\x7d\x87\xc8\x01\x00\x00")

func shadersTriFragSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFragSpv,
		"shaders/tri-frag.spv",
	)
}

func shadersTriFragSpv() (*asset, error) {
	bytes, err := shadersTriFragSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shaders/tri-frag.spv", size: 456, mode: os.FileMode(420), modTime: time.Unix(1471301402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVertSpv = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x52\x5d\x4b\xeb\x40\x10\x9d\x24\x6d\xd3\x8f\xdb\xde\xde\xdb\xf6\xde\x17\x11\xc5\x47\xa1\x14\xa9\x22\x88\x42\x55\xa8\x0f\x7d\x10\x0b\xbe\x86\xb5\x5d\xe2\x6a\x4d\x42\x12\x41\xfc\x15\xfe\x5c\x5f\x04\xcf\xec\x4e\xa0\x6e\xd8\xcc\xce\x39\x33\x73\x66\x96\x0d\xfc\x83\x90\xc8\xc3\xd7\xa4\x11\xb9\xf5\x87\x7c\xf8\x44\x1d\x6a\x58\x3b\x5f\x2c\x17\xe3\xa2\x5c\x8f\xa7\xc7\x13\xe6\x7b\x14\xd8\x38\xe6\x7e\x53\x68\xcf\x35\xec\x17\x65\x12\x3e\x77\x6d\x0d\x42\x54\x80\x4a\x44\x1f\x1e\xf3\x2d\xd4\x89\x66\x77\x97\x51\xa1\x33\x95\xab\x52\x47\xc5\xa3\x5a\xeb\x3c\x4a\x1f\x9e\xf4\xaa\x2c\x7e\xc6\x80\x32\x49\x1c\x6d\x54\x12\xbf\xaa\x58\x47\xd3\xa3\x49\xa6\x56\xcf\x54\x47\xd4\xb6\x56\x1d\x3d\x76\x60\xe3\x4d\x74\xab\xf3\x7b\x9d\x97\xfa\x8d\xf1\x86\xe0\x24\x5c\x5a\x98\xd2\xa4\x09\xd0\xd0\xe2\x5e\x85\x9b\xa4\x5c\x9a\x77\xed\x72\x1c\xe7\x3b\xee\x6a\x63\xb2\x6b\x53\x94\x2a\x59\x69\xe8\x04\x76\x2e\xa7\x19\xd8\xf9\xb2\xb4\xa0\x1b\x78\x95\x4e\x65\x2b\xcc\x13\xcc\xdb\xc2\x7c\xc1\xf8\x06\xe7\xf8\x57\xd8\x1c\x53\x71\xcd\x5d\xa9\x31\x00\xca\xf8\xbe\xbd\x45\x17\xf3\x0f\xa7\x06\xec\x1e\xf6\x7f\xc4\x87\xb6\x67\x77\xf7\x23\xfc\x9b\xc2\xf1\x3a\x14\xbf\x25\xfa\x3b\xf0\xdb\x12\xdf\xb2\x3a\xae\x9f\xaa\x46\xdb\xe6\xd6\xe8\x97\xf4\xc6\xdc\x99\xf8\x5d\xc1\x58\xa3\x27\x1a\x9e\x68\xf4\xec\x1b\x70\x8b\xf3\xfb\xc2\x85\x92\xdf\x97\xb7\xe0\x09\x3f\x90\x5a\xcc\x9f\xa0\x07\x5f\xfa\x27\xc1\x3f\x81\xd4\x61\xcf\x65\xbe\xbf\x92\x3f\x03\xca\xb9\x43\xe9\x87\x35\x2f\x90\x31\x94\x98\x2f\x28\x9c\x62\x7f\x07\x00\x00\xff\xff\xa4\x8d\xc5\x57\xd0\x02\x00\x00")

func shadersTriVertSpvBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVertSpv,
		"shaders/tri-vert.spv",
	)
}

func shadersTriVertSpv() (*asset, error) {
	bytes, err := shadersTriVertSpvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/Shaders/tri-vert.spv", size: 720, mode: os.FileMode(420), modTime: time.Unix(1471301402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriFrag = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x5f\x6b\xdb\x3c\x14\xc6\xef\xf3\x29\x1e\xd2\x9b\x14\xf2\xda\x6e\xe8\x3b\xb6\x96\x5d\xb8\xe9\x9f\x99\x95\x04\xe2\x74\xa5\x57\x46\x91\x4f\x1c\x6d\x8e\xe4\x49\x72\xdc\x30\xf6\xdd\x77\x94\xb8\xb4\x65\x33\x02\x23\x9d\xe7\x3c\xfa\x9d\xa3\x13\xc7\x98\x9a\x66\x6f\x55\xb5\xf1\x98\x24\x67\x1f\x70\x67\x4c\x55\x13\x32\x2d\x23\xa4\x75\x8d\x45\x08\x39\x2c\xc8\x91\xdd\x51\x19\x0d\xe2\x98\x17\xee\x95\x24\xed\xa8\x44\xab\x4b\xb2\xf0\x1b\x42\xda\x08\xc9\xbf\x3e\x32\xc6\x37\xb2\x4e\x19\x8d\x49\x94\x60\x14\x04\xc3\x3e\x34\x3c\xbd\x0c\x16\x7b\xd3\x62\x2b\xf6\xd0\xc6\xa3\x75\xc4\x1e\xca\x61\xad\xf8\x72\x7a\x96\xd4\x78\x28\x0d\x69\xb6\x4d\xad\x84\x96\x84\x4e\xf9\xcd\xe1\x9e\xde\x25\x90\xe0\xa9\xf7\x30\x2b\x2f\x58\x2e\x38\xa1\xe1\xdd\xfa\xad\x10\xc2\xf7\xd0\xe1\xdb\x78\xdf\x5c\xc4\x71\xd7\x75\x91\x38\x00\x47\xc6\x56\x71\x7d\x94\xba\xf8\x3e\x9b\xde\xcc\xf2\x9b\xff\x18\xba\x4f\x7a\xd0\x35\x39\x07\x4b\x3f\x5b\x65\xb9\xe0\xd5\x1e\xa2\x61\x28\x29\x56\x8c\x5a\x8b\x0e\xc6\x42\x54\x96\x38\xe6\x4d\x80\xee\xac\xf2\x4a\x57\x63\x38\xb3\xf6\x9d\xb0\x14\x6c\x4a\xe5\xbc\x55\xab\xd6\xbf\xeb\xd9\x0b\x22\x57\xfe\x56\xc0\x5d\x13\x1a\xc3\x34\x47\x96\x0f\x71\x95\xe6\x59\x3e\x0e\x26\x8f\xd9\xf2\xcb\xfc\x61\x89\xc7\x74\xb1\x48\x67\xcb\xec\x26\xc7\x7c\x81\xe9\x7c\x76\x9d\x2d\xb3\xf9\x8c\x77\xb7\x48\x67\x4f\xf8\x9a\xcd\xae\xc7\x20\xee\x18\xdf\x43\xcf\x8d\x0d\x15\x30\xa6\x0a\xdd\x3c\x3e\x22\x72\xa2\x77\x08\x6b\x73\x44\x72\x0d\x49\xb5\x56\x92\x4b\xd3\x55\x2b\x2a\x42\x65\x76\x64\x35\x57\x84\x86\xec\x56\xb9\xf0\xaa\x8e\x01\xcb\x60\x53\xab\xad\xf2\xc2\x1f\x8e\xfe\xaa\x2b\x1a\x9c\xec\xfa\x29\x38\x4f\x92\xc1\x09\x3d\x7b\x3e\x0e\xdb\xbb\xfb\x22\x5d\x5c\x15\x8e\x1a\x61\x85\xa7\xc2\x6d\x04\xe7\x16\x66\xf5\x9d\x24\x8f\xdb\x05\x48\x87\xfe\xfe\x2b\x85\x95\xcc\x52\xbc\xe0\x15\xe7\x93\x84\x1f\xf2\xc7\x6b\x4e\x2d\x78\xb4\x3c\x46\xb5\x91\x07\x30\x7c\x46\x72\x8a\x70\xb4\x23\x79\x8e\xf6\xd6\x8a\x6a\x6a\x6a\x63\x2f\x07\x3b\xa3\x4a\x1e\x20\xa5\x47\xa7\xf8\x35\xe0\xf1\x78\x0d\x72\x56\x90\x8f\x92\xe8\xe3\xd9\x64\x8c\x84\x57\x94\xfc\xff\x69\x8c\xb3\x28\xe1\x01\xfe\x3d\xf8\x13\x00\x00\xff\xff\x06\x48\xb5\x12\x3c\x03\x00\x00")

func shadersTriFragBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriFrag,
		"Resources/Shaders/tri.frag",
	)
}

func shadersTriFrag() (*asset, error) {
	bytes, err := shadersTriFragBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/Shaders/tri.frag", size: 828, mode: os.FileMode(420), modTime: time.Unix(1471301365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _shadersTriVert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\xdf\x6f\xda\x30\x10\xc7\xdf\xf3\x57\x9c\xe8\x4b\x91\x58\x92\x21\xb4\x87\x56\x7b\x48\x29\xeb\xa2\xa1\x30\x25\x74\x55\x9f\x22\xe3\x1c\xc1\x9b\xb1\x3d\xdb\x21\xa0\x69\xff\xfb\xce\x90\x6a\xad\x36\x84\x14\xd9\xf7\xbd\xaf\x3f\xf7\x23\x49\x60\xae\xcd\xc9\x8a\x76\xe7\x61\x9a\xbe\xff\x00\x0f\x5a\xb7\x12\x21\x57\x3c\x86\x4c\x4a\x28\x43\xc8\x41\x89\x0e\xed\x01\x9b\x38\x4a\x12\xfa\xc3\x52\x70\x54\x0e\x1b\xe8\x54\x83\x16\xfc\x0e\x21\x33\x8c\xd3\x67\x88\x4c\xe0\x1b\x5a\x27\xb4\x82\x69\x9c\xc2\x75\x10\x8c\x86\xd0\x68\x7c\x1b\x2c\x4e\xba\x83\x3d\x3b\x81\xd2\x1e\x3a\x87\xe4\x21\x1c\x6c\x05\x3d\x8e\x47\x8e\xc6\x83\x50\xc0\xf5\xde\x48\xc1\x14\x47\xe8\x85\xdf\x9d\xdf\x19\x5c\x02\x09\x3c\x0f\x1e\x7a\xe3\x19\xc9\x19\x25\x18\x3a\x6d\x5f\x0b\x81\xf9\x01\x3a\xfc\x76\xde\x9b\x9b\x24\xe9\xfb\x3e\x66\x67\xe0\x58\xdb\x36\x91\x17\xa9\x4b\x96\xf9\x7c\x51\x54\x8b\x77\x04\x3d\x24\x3d\x2a\x89\xce\x81\xc5\x9f\x9d\xb0\x54\xf0\xe6\x04\xcc\x10\x14\x67\x1b\x42\x95\xac\x07\x6d\x81\xb5\x16\x29\xe6\x75\x80\xee\xad\xf0\x42\xb5\x13\x70\x7a\xeb\x7b\x66\x31\xd8\x34\xc2\x79\x2b\x36\x9d\x7f\xd3\xb3\x17\x44\xaa\xfc\xb5\x80\xba\xc6\x14\x8c\xb2\x0a\xf2\x6a\x04\x77\x59\x95\x57\x93\x60\xf2\x94\xaf\x3f\xaf\x1e\xd7\xf0\x94\x95\x65\x56\xac\xf3\x45\x05\xab\x12\xe6\xab\xe2\x3e\x5f\xe7\xab\x82\x4e\x9f\x20\x2b\x9e\xe1\x4b\x5e\xdc\x4f\x00\xa9\x63\xf4\x0e\x1e\x8d\x0d\x15\x10\xa6\x08\xdd\xbc\x0c\x11\x2a\xc4\x37\x08\x5b\x7d\x41\x72\x06\xb9\xd8\x0a\x4e\xa5\xa9\xb6\x63\x2d\x42\xab\x0f\x68\x15\x55\x04\x06\xed\x5e\xb8\x30\x55\x47\x80\x4d\xb0\x91\x62\x2f\x3c\xf3\xe7\xab\x7f\xea\x8a\xa3\xab\xc3\xb0\x05\xb3\x34\x8d\xae\xf0\xe8\xe9\x3a\x1c\x1f\x96\x75\x56\xde\xd5\x0e\x0d\xb3\xcc\x63\xed\x76\x8c\x72\x6b\xbd\xf9\x8e\x9c\xd6\xed\x06\x50\x85\xfe\xfe\x2f\x85\x94\xc4\x52\xbf\xe0\xd5\xb3\x69\x4a\x83\xfc\xf1\x37\x47\x32\x5a\x2d\x0f\xd7\x52\xf3\x33\x18\x7c\x84\x74\x1c\x06\x73\x40\x3e\x03\xa3\xdd\x6d\x74\xd0\xa2\xa1\xc5\x11\xea\x7a\x0c\xbf\x22\x5a\x8b\x56\xd6\x5f\xb5\x13\x83\xfc\xac\xf9\x1d\xfd\x09\x00\x00\xff\xff\x29\xec\xb2\xf5\x1e\x03\x00\x00")

func shadersTriVertBytes() ([]byte, error) {
	return bindataRead(
		_shadersTriVert,
		"Resources/Shaders/tri.vert",
	)
}

func shadersTriVert() (*asset, error) {
	bytes, err := shadersTriVertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Resources/Shaders/tri.vert", size: 798, mode: os.FileMode(420), modTime: time.Unix(1463266019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Resources/Shaders/.DS_Store":    shadersDs_store,
	"Resources/Shaders/tri-frag.spv": shadersTriFragSpv,
	"Resources/Shaders/tri-vert.spv": shadersTriVertSpv,
	"Resources/Shaders/tri.frag":     shadersTriFrag,
	"Resources/Shaders/tri.vert":     shadersTriVert,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"shaders": &bintree{nil, map[string]*bintree{
		".DS_Store":    &bintree{shadersDs_store, map[string]*bintree{}},
		"tri-frag.spv": &bintree{shadersTriFragSpv, map[string]*bintree{}},
		"tri-vert.spv": &bintree{shadersTriVertSpv, map[string]*bintree{}},
		"tri.frag":     &bintree{shadersTriFrag, map[string]*bintree{}},
		"tri.vert":     &bintree{shadersTriVert, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
